/*istanbul ignore next*/'use strict';

var /*istanbul ignore next*/_react = require('react'); /*istanbul ignore next*/var _react2 = _interopRequireDefault(_react);
var /*istanbul ignore next*/_reactDom = require('react-dom'); /*istanbul ignore next*/var _reactDom2 = _interopRequireDefault(_reactDom);
var /*istanbul ignore next*/_reactAddonsTestUtils = require('react-addons-test-utils'); /*istanbul ignore next*/var _reactAddonsTestUtils2 = _interopRequireDefault(_reactAddonsTestUtils);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}jest.autoMockOff();

var Detail = require('../src/pages/Detail').default;

describe('Detail', function () {

  it('start with zero commits', function () {
    var rendered = /*istanbul ignore next*/_reactAddonsTestUtils2.default.renderIntoDocument(
    /*istanbul ignore next*/_react2.default.createElement(Detail, /*istanbul ignore next*/{ params: { repo: '' } }));


    expect(rendered.state.commits.length).toEqual(0);
  });

  it('shows commits by default', function () {
    var rendered = /*istanbul ignore next*/_reactAddonsTestUtils2.default.renderIntoDocument(
    /*istanbul ignore next*/_react2.default.createElement(Detail, /*istanbul ignore next*/{ params: { repo: '' } }));


    expect(rendered.state.mode).toEqual('commits');
  });

  it('shows forks when the button is tapped', function () {
    var rendered = /*istanbul ignore next*/_reactAddonsTestUtils2.default.renderIntoDocument(
    /*istanbul ignore next*/_react2.default.createElement(Detail, /*istanbul ignore next*/{ params: { repo: '' } }));


    var forksButton = rendered.refs.forks;
    /*istanbul ignore next*/_reactAddonsTestUtils2.default.Simulate.click(forksButton);
    expect(rendered.state.mode).toEqual('forks');
  });

  it('fetches fork from GitHub', function () {
    var rendered = /*istanbul ignore next*/_reactAddonsTestUtils2.default.renderIntoDocument(
    /*istanbul ignore next*/_react2.default.createElement(Detail, /*istanbul ignore next*/{ params: { repo: 'react' } }));


    setTimeout(function () {
      console.log('In waitFor: ' + rendered.state.forks.length);
      return rendered.state.forks.length > 0;
    }, "commit to be set", 2000);

    runs(function () {
      expect(rendered.state.forks.length).toEqual(30);
    });
  });

});